<?phprequire_once($_SERVER['DOCUMENT_ROOT'] . '/source/Core/Conexao.class.php');class PessoaDAO extends Conexao{    /** @var PDO */    private $conexao;    /** @var PDOStatment */    private $sql;    public function adicionarVoto($id_pessoa, $voto, $usuario_logado, $id_categoria_pessoa)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "INSERT INTO tb_votos "            . "(tb_pessoa_id_pessoa, qtd_voto, pessoa_voto, categoria_voto)"            . "VALUES (?,?,?,?)";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $id_pessoa);        $this->sql->bindValue(2, $voto);        $this->sql->bindValue(3, $usuario_logado);        $this->sql->bindValue(4, $id_categoria_pessoa);        $this->sql->execute();    }    public function cadastrarCategoria($nome_categoria)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "INSERT INTO tb_categoria "            . "(nome_categoria)"            . "VALUES (?)";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $nome_categoria);        try {            $this->sql->execute();            return 1;            echo "<meta http-equiv='refresh' content='0'>";        }catch (Exception $ex){            return -1;        }    }    public function deletarCategoria($id_categoria)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "DELETE FROM tb_categoria WHERE id_categoria = ?;";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $id_categoria);        try {        $this->sql->execute();            return 2;        }catch (Exception $ex){            return -1;        }    }    public function cadastrarValor($nome_valor)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "INSERT INTO tb_valor "            . "(nome_valor)"            . "VALUES (?)";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $nome_valor);        try {            $this->sql->execute();            return 1;        }catch (Exception $ex){            return -1;        }    }    public function deletarValor($id_valor)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "DELETE FROM tb_valor WHERE id_valor = ?;";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $id_valor);        try {            $this->sql->execute();            return 2;        }catch (Exception $ex){            return -1;        }    }    public function cadastrarPessoa($nome_pessoa, $email_pessoa, $cadastro_pessoa, $cargo_pessoa, $cpf_pessoa, $tipo_pessoa, $id_categoria_tb_categoria, $id_valor_tb_valor)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        try {        //2 passo: montar a instrução SQL        $comando_sql = "INSERT INTO tb_pessoa "            . "(nome_pessoa, tb_categoria_id_categoria, tipo_pessoa, cadastro_pessoa, cargo_pessoa, email_pessoa, cpf_pessoa, tb_valor_id_valor)"            . "VALUES (?,?,?,?,?,?,?,?)";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $nome_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(2, $id_categoria_tb_categoria, PDO::PARAM_INT);        $this->sql->bindValue(3, $tipo_pessoa, PDO::PARAM_INT);        $this->sql->bindValue(4, $cadastro_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(5, $cargo_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(6, $email_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(7, $cpf_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(8, $id_valor_tb_valor, PDO::PARAM_INT);        $this->sql->execute();        }catch (Exception $ex){            echo $ex->getMessage();            return -1;        }    }    public function alterarConta($cod_pessoa, $nome_pessoa, $email_pessoa, $telefone_pessoa, $cod_cidade)    {        // 1 Passo: Resgatar a conexão        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "UPDATE tb_pessoa "            . " SET nome_pessoa = ?, email_pessoa = ?, telefone_pessoa = ?, cod_cidade = ? "            . " WHERE cod_pessoa = ?";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $nome_pessoa);        $this->sql->bindValue(2, $email_pessoa);        $this->sql->bindValue(3, $telefone_pessoa);        $this->sql->bindValue(4, $cod_cidade);        $this->sql->bindValue(5, $cod_pessoa);        $this->sql->execute();    }    public function carregarDados()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT tb_pessoa.id_pessoa, nome_pessoa, tb_categoria_id_categoria, tb_valor_id_valor, nome_valor, imagem_pessoa, tipo_pessoa                        FROM tb_pessoa INNER JOIN tb_valor                          ON tb_pessoa.tb_valor_id_valor = tb_valor.id_valor                         INNER JOIN tb_pessoa_categoria                         ON tb_pessoa.id_pessoa = tb_pessoa_categoria.tb_pessoa_id_pessoa";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function carregarDadosPorCategoria($categoria)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT tb_pessoa.id_pessoa, nome_pessoa, tb_categoria_id_categoria, tb_valor_id_valor, nome_valor, nome_categoria, imagem_pessoa                        FROM tb_pessoa INNER JOIN tb_valor                          ON tb_pessoa.tb_valor_id_valor = tb_valor.id_valor                         INNER JOIN tb_pessoa_categoria                         ON tb_pessoa.id_pessoa = tb_pessoa_categoria.tb_pessoa_id_pessoa                        INNER JOIN tb_categoria                         ON tb_categoria.id_categoria = tb_pessoa_categoria.tb_categoria_id_categoria                        WHERE nome_categoria = ?                        GROUP BY id_pessoa";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $categoria);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function carregarDadosPorCategoriaValor($categoria, $valor)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(qtd_voto) AS total_votos_pessoa, id_pessoa,  nome_pessoa, nome_valor, nome_categoria, id_categoria, id_valor, imagem_pessoa                        FROM  tb_votos                         INNER JOIN tb_pessoa                         ON tb_votos.tb_pessoa_id_pessoa = tb_pessoa.id_pessoa                        INNER JOIN tb_valor                          ON tb_pessoa.tb_valor_id_valor = tb_valor.id_valor                         INNER JOIN tb_pessoa_categoria                         ON tb_pessoa.id_pessoa = tb_pessoa_categoria.tb_pessoa_id_pessoa                        INNER JOIN tb_categoria                         ON tb_pessoa_categoria.tb_categoria_id_categoria = tb_categoria.id_categoria                        WHERE id_categoria = ? OR id_valor = ?                        GROUP BY tb_votos.tb_pessoa_id_pessoa                         ORDER BY total_votos_pessoa DESC";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $categoria);        $this->sql->bindValue(2, $valor);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaQtdVotos()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(pessoa_voto) total_votos_logado FROM tb_votos ";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaQtdVotosMesmaCategoria($usuario_logado, $categoria_voto)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(categoria_voto) total_votos_categoria FROM tb_votos V INNER JOIN tb_pessoa P ON V.tb_pessoa_id_pessoa = P.id_pessoa = ? WHERE V.categoria_voto = ?";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $usuario_logado);        $this->sql->bindValue(2, $categoria_voto);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaCategorias()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT * FROM tb_categoria";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaValor()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT * FROM tb_valor";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function CarregarVotos($id_pessoa)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT id_voto, qtd_voto, tb_pessoa_id_pessoa, SUM(qtd_voto) total_votos FROM tb_votos V INNER JOIN tb_pessoa id_pessoa ON V.tb_pessoa_id_pessoa = ? WHERE id_pessoa = ? ";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $id_pessoa);        $this->sql->bindValue(2, $id_pessoa);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function ValidarLogin($cpf)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT id_pessoa, cadastro_pessoa, nome_pessoa, tipo_pessoa FROM tb_pessoa "            . " WHERE cpf_pessoa = ?";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $cpf);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function BuscarIDAtravesEmail($email, $nome_pessoa, $id_face)    {        $this->conexao = parent::getConexao();        if (trim($id_face) != '') {            $comando_sql = "SELECT cod_pessoa,id_face FROM tb_pessoa WHERE id_face = ?";        } else if (trim($email) != '') {            $comando_sql = "SELECT cod_pessoa,id_face FROM tb_pessoa WHERE email_pessoa = ?";        } else {            $comando_sql = "SELECT cod_pessoa,id_face FROM tb_pessoa WHERE nome_pessoa = ?";        }        $this->sql = $this->conexao->prepare($comando_sql);        if (trim($id_face) != '') {            $this->sql->bindValue(1, $id_face);        } else if (trim($email) != '') {            $this->sql->bindValue(1, $email);        } else {            $this->sql->bindValue(1, $nome_pessoa);        }        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        $verificar = $this->sql->fetchAll();        if (count($verificar) > 0) {            if ($verificar[0]['id_face'] == '' && $id_face != '') {                $comando_sql = 'Update tb_pessoa SET id_face = ? where cod_pessoa = ?';                $this->sql = $this->conexao->prepare($comando_sql);                $this->sql->bindValue(1, $id_face);                $this->sql->bindvalue(2, $verificar[0]['cod_pessoa']);                $this->sql->execute();            }        }        return $verificar;    }    public function VerificarEmailDuplicado($email, $cod_pessoa)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT email_pessoa FROM tb_pessoa WHERE email_pessoa = ?";        if ($cod_pessoa != '') {            $comando_sql = $comando_sql . ' and cod_pessoa <> ?';        }        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $email);        if ($cod_pessoa != '') {            $this->sql->bindValue(2, $cod_pessoa);        }        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        $verificar = $this->sql->fetchAll();        if (count($verificar) == 0) {            return false;        } else {            return true;        }    }    public function ValidaEmail($email)    {        $this->conexao = parent::getConexao();        $comando_sql = 'SELECT senha_pessoa,nome_pessoa FROM tb_pessoa WHERE email_pessoa = ?';        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $email);        $this->sql->execute();        return $this->sql->fetchAll();    }    public function ValidaHash($hash)    {        $this->conexao = parent::getConexao();        $comando_sql = 'SELECT cod_pessoa,senha_pessoa,nome_pessoa,email_pessoa FROM tb_pessoa where senha_pessoa = ?';        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $hash);        $this->sql->execute();        return $this->sql->fetchAll();    }    public function NovaSenha($hash, $cod)    {        $this->conexao = parent::getConexao();        $comando_sql = 'Update tb_pessoa SET senha_pessoa = ? where cod_pessoa = ?';        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $hash);        $this->sql->bindvalue(2, $cod);        $this->sql->execute();        return 1;    }    public function ProcuraEmail($email)    {        $this->conexao = parent::getConexao();        $comando_sql = 'SELECT COUNT(*) FROM tb_pessoa WHERE email_pessoa = ?';        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $email);        $this->sql->execute();        return $this->sql->fetchAll();    }    public function novoCadastrarPessoa($tipo_pessoa, $nome_pessoa, $email_pessoa, $cadastro_pessoa, $imagem,                                        $cargo_pessoa, $cpf_pessoa, $id_categoria_tb_categoria, $id_valor_tb_valor) {        $this->conexao = parent::getConexao();        //2 passo: montar a instrução SQL        $comando_sql = "INSERT INTO tb_pessoa "            . "(tipo_pessoa, nome_pessoa, email_pessoa, cadastro_pessoa, imagem_pessoa, cargo_pessoa, cpf_pessoa, tb_valor_id_valor)"            . "VALUES (?,?,?,?,?,?,?,?)";        // 3 passo: vincular a conexão com a instrução SQL        $this->sql = $this->conexao->prepare($comando_sql);        // 4 passo: Vincular os parametros com os links da instrução        $this->sql->bindValue(1, $tipo_pessoa, PDO::PARAM_INT);        $this->sql->bindValue(2, $nome_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(3, $email_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(4, $cadastro_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(5, $imagem, PDO::PARAM_STR);        $this->sql->bindValue(6, $cargo_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(7, $cpf_pessoa, PDO::PARAM_STR);        $this->sql->bindValue(8, $id_valor_tb_valor, PDO::PARAM_INT);            try {                $this->conexao->beginTransaction();                $this->sql->execute();                $id_pessoa = $this->conexao->lastInsertId();                    //2 passo: montar a instrução SQL                        $comando = "INSERT INTO tb_pessoa_categoria"                        . "(tb_pessoa_id_pessoa,tb_pessoa_tb_valor_id_valor, tb_categoria_id_categoria)"                        . "VALUES (?,?,?)";                        // 3 passo: vincular a conexão com a instrução SQL                        $this->sql = $this->conexao->prepare($comando);                        // 4 passo: Vincular os parametros com os links da instrução                        $this->sql->bindValue(1, $id_pessoa);                        $this->sql->bindValue(2, $id_valor_tb_valor);                        $this->sql->bindValue(3, $id_categoria_tb_categoria);                        $this->sql->execute();                $this->conexao->commit();            } catch (Exception $ex) {                echo $ex->getMessage();                return -1;            }    }    public function buscaQtdTotalColaboradores($tipo_pessoa)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(id_pessoa) AS total_pessoas, tipo_pessoa  FROM tb_pessoa WHERE tipo_pessoa = ?";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $tipo_pessoa);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaQtdTotalColaboradoresVotacao()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(id_pessoa) AS total_candidatos FROM tb_pessoa WHERE tipo_pessoa = 1";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function buscaQtdTotalVotos()    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(pessoa_voto) AS total_votos FROM tb_votos";        $this->sql = $this->conexao->prepare($comando_sql);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }    public function CarregarDadosRanking($tipo_pessoa)    {        $this->conexao = parent::getConexao();        $comando_sql = "SELECT COUNT(qtd_voto) AS total_votos_pessoa, id_pessoa,  nome_pessoa, nome_valor, nome_categoria, imagem_pessoa, tipo_pessoa                        FROM  tb_votos                         INNER JOIN tb_pessoa                         ON tb_votos.tb_pessoa_id_pessoa = tb_pessoa.id_pessoa                        INNER JOIN tb_valor                          ON tb_pessoa.tb_valor_id_valor = tb_valor.id_valor                         INNER JOIN tb_pessoa_categoria                         ON tb_pessoa.id_pessoa = tb_pessoa_categoria.tb_pessoa_id_pessoa                        INNER JOIN tb_categoria                         ON tb_pessoa_categoria.tb_categoria_id_categoria = tb_categoria.id_categoria                        WHERE tipo_pessoa = ?                        GROUP BY tb_votos.tb_pessoa_id_pessoa				                        ORDER BY total_votos_pessoa DESC";        $this->sql = $this->conexao->prepare($comando_sql);        $this->sql->bindValue(1, $tipo_pessoa);        // organiza o resultado para não trazer info duplicada        $this->sql->setFetchMode(PDO::FETCH_ASSOC);        $this->sql->execute();        // retorna toda a consulta feita        return $this->sql->fetchAll();    }}